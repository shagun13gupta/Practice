@inject IGetTodayTransactionUseCase GetTodayTransactionUseCase

@if (transactions != null) {
 <table class="table">
    <thead>
        <tr>
            <th>Cashier Name</th>
            <th>Product Name</th>
            <th>Date Time</th>
            <th>Qty Before</th>
            <th>Qty Sold</th>
            <th>Qty After</th>
            <th>Sold Amount</th>
        </tr>
    </thead>
    <tbody>
        
            @foreach (var tran in transactions)
            {
                <tr>
                    <td>@tran.CashierName</td>
                    <td>@tran.ProductName</td>
                    <td>@tran.TimeStamp.ToString("yyyy-MM-dd hh:mm")</td>
                    <td>@tran.BeforeQty</td>
                    <td>@tran.SoldQty</td>
                    <td>@(tran.BeforeQty-tran.SoldQty)</td>
                    <td style="text-align:right">@(string.Format("{0:c}",tran.SoldQty * tran.Price))</td>
                </tr>
            }     
    </tbody>
    @*<tfoot>
        <tr>
            <td colspan="5">&nbsp;</td>
            <td><b>Grand Total: </b></td>
            <td style="text-align:right"><b>@(string.Format("{0:c}",transactions.Sum(x=>x.Price)))</b></td>
        </tr>
    </tfoot>*@
 </table>
}


@code {
    private IEnumerable<Transaction> transactions;
    public void LoadTransactions(string cashierName)
    {
        transactions = GetTodayTransactionUseCase.Execute(cashierName);
        StateHasChanged();
    }
}
