@page "/editCategory/{categoryId}"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager navigationManager
@inject IEditCategoryUseCase EditCategoryUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
<h3>EditCategoryComponent</h3>

@if (category != null)
{
    <EditForm Model="category" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="category.Name" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="category.description" class="form-control"></InputText>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-danger" @onclick="OnCancel">Cancel</button>
    </EditForm>
}
@code {
    [Parameter]
    public string categoryId { get; set; }

    private Category category;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        category = new Category();
        this.category = GetCategoryByIdUseCase.Execute(Convert.ToInt32(categoryId));
    }
    //protected override void OnParametersSet()
    //{
    //    base.OnParametersSet();
    //    if (int.TryParse(this.categoryId, out int iCategoryId))
    //        this.category = GetCategoryByIdUseCase.Execute(iCategoryId);

    //}
    private void OnValidSubmit()
    {
        EditCategoryUseCase.Execute(this.category);
        navigationManager.NavigateTo("/categories");
    }
    private void OnCancel()
    {
        navigationManager.NavigateTo("/categories");
    }
}
