@page "/categories"
@attribute [Authorize(Policy = "AdminOnly")]

<h3>Manage Categories</h3>
@inject NavigationManager naviagationManager
@inject UseCases.UseCaseInterfaces.IViewCategoryUseCase ViewCategoryUseCase
@inject UseCases.UseCaseInterfaces.IDeleteCategoryUseCase DeleteCategoryUseCase



@if (categories != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>@category.description</td>
                    <td>
                        <button type="button" class="btn btn-link" @onclick="@(()=>EditCategory(category))">Edit</button>
                        <button type="button" class="btn btn-link" @onclick="@(()=>DeleteCategory(category.categoryId))">Delete</button>
                    </td>
                </tr>

            }
        </tbody>
    </table>
}
<br />
<button type="button" @onclick="OnClickAddCategory" class="btn btn-primary">Add Category</button>
@code {
    private List<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        categories = ViewCategoryUseCase.Execute().ToList();
    }
    private void OnClickAddCategory()
    {
        naviagationManager.NavigateTo("/addCategory");
    }
    private void DeleteCategory(int categoryId)
    {
        DeleteCategoryUseCase.Execute(categoryId);
        ViewCategoryUseCase.Execute()?.ToList();
        naviagationManager.NavigateTo("/categories");
    }
    private void EditCategory(Category category)
    {
        naviagationManager.NavigateTo($"/editCategory/{category.categoryId}");
    }
}
